#pragma version 10
#pragma typetrack false

// algopy.arc4.ARC4Contract.approval_program() -> uint64:
main:
    // smart_contracts/submate/contract.py:6
    // class Submate(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0x02bece11 0xe4a55150 // method "hello(string)string", method "create_group(string,string,uint64,uint64,string)void"
    txna ApplicationArgs 0
    match main_hello_route@3 main_create_group_route@4

main_after_if_else@11:
    // smart_contracts/submate/contract.py:6
    // class Submate(ARC4Contract):
    pushint 0 // 0
    return

main_create_group_route@4:
    // smart_contracts/submate/contract.py:12
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/submate/contract.py:6
    // class Submate(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    btoi
    txna ApplicationArgs 5
    extract 2 0
    // smart_contracts/submate/contract.py:12
    // @abimethod()
    callsub create_group
    pushint 1 // 1
    return

main_hello_route@3:
    // smart_contracts/submate/contract.py:8
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/submate/contract.py:6
    // class Submate(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/submate/contract.py:8
    // @abimethod()
    callsub hello
    dup
    len
    itob
    extract 6 2
    swap
    concat
    pushbytes 0x151f7c75
    swap
    concat
    log
    pushint 1 // 1
    return

main_bare_routing@7:
    // smart_contracts/submate/contract.py:6
    // class Submate(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    pushint 1 // 1
    return


// smart_contracts.submate.contract.Submate.hello(name: bytes) -> bytes:
hello:
    // smart_contracts/submate/contract.py:8-9
    // @abimethod()
    // def hello(self, name: String) -> String:
    proto 1 1
    // smart_contracts/submate/contract.py:10
    // return "Hello, " + name
    pushbytes "Hello, "
    frame_dig -1
    concat
    retsub


// smart_contracts.submate.contract.Submate.create_group(group_name: bytes, subscription: bytes, per_user_fee: uint64, max_members: uint64, creator: bytes) -> void:
create_group:
    // smart_contracts/submate/contract.py:12-20
    // @abimethod()
    // def create_group(
    //     self,
    //     group_name: String,
    //     subscription: String,
    //     per_user_fee: UInt64,
    //     max_members: UInt64,
    //     creator: String,
    // ) -> None:
    proto 5 0
    // smart_contracts/submate/contract.py:21
    // assert group_name != "", "group_name must not be empty"
    frame_dig -5
    pushbytes ""
    !=
    assert // group_name must not be empty
    // smart_contracts/submate/contract.py:22
    // assert subscription != "", "subscription must not be empty"
    frame_dig -4
    pushbytes ""
    !=
    assert // subscription must not be empty
    // smart_contracts/submate/contract.py:23
    // assert per_user_fee > 0, "per_user_fee must be greater than 0"
    frame_dig -3
    assert // per_user_fee must be greater than 0
    // smart_contracts/submate/contract.py:24
    // assert max_members > 0, "max_members must be greater than 0"
    frame_dig -2
    assert // max_members must be greater than 0
    // smart_contracts/submate/contract.py:25
    // assert max_members <= 4, "max_members must be less than or equal to 100"
    frame_dig -2
    pushint 4 // 4
    <=
    assert // max_members must be less than or equal to 100
    // smart_contracts/submate/contract.py:28
    // self.group_name = group_name
    pushbytes "group_name"
    frame_dig -5
    app_global_put
    // smart_contracts/submate/contract.py:29
    // self.subscription = subscription
    pushbytes "subscription"
    frame_dig -4
    app_global_put
    // smart_contracts/submate/contract.py:30
    // self.creator = creator
    pushbytes "creator"
    frame_dig -1
    app_global_put
    // smart_contracts/submate/contract.py:31
    // self.members = creator
    pushbytes "members"
    frame_dig -1
    app_global_put
    // smart_contracts/submate/contract.py:32
    // self.pending_members = String("")
    pushbytess "pending_members" "" // "pending_members", ""
    app_global_put
    // smart_contracts/submate/contract.py:33
    // self.per_user_fee = per_user_fee
    pushbytes "per_user_fee"
    frame_dig -3
    app_global_put
    // smart_contracts/submate/contract.py:34
    // self.max_members = max_members
    pushbytes "max_members"
    frame_dig -2
    app_global_put
    retsub

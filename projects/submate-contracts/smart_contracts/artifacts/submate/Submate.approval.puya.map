{
  "version": 3,
  "sources": [
    "../../submate/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AASQ;AAAsB;AAAtB;AAJR;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;;AAAA;;;;;;AAAA;;AAUK;;AAAA;AAAA;AAAA;;AAAA;AAVL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAUK;;;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AANL;;;AAAA;;;AAMK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AANL;;AAAA;;;;;;;;;AAMA;;;AAEe;;;;;;;;;AAAA;;AAAA;AAAP;AAER;;;AASe;;AAAc;AAAd;AAAP;AACO;;AAAgB;AAAhB;AAAP;AACA;;AAAA;AACA;;AAAA;AACO;;AAAe;;AAAf;AAAP;AAEG;AAAA;AAAA;AAAA;AAAe;AAAf;AAAX;;;AACY;AAAA;;AAAA;AAIJ;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;;;;;AAAuB;AAAvB;AACA;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;AAAA;;AAAA;;AARkB;AAAA;AAAA;AAAA;AAAc;;;AAAd;AAAA;;AAAA;AAAd;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.submate.contract.Submate.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock \"groups\" \"\""
    },
    "15": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "17": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "20": {
      "op": "bytec_0 // \"groups\"",
      "defined_out": [
        "\"groups\""
      ],
      "stack_out": [
        "\"groups\""
      ]
    },
    "21": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "\"groups\""
      ],
      "stack_out": [
        "\"groups\"",
        "\"\""
      ]
    },
    "22": {
      "op": "app_global_put",
      "stack_out": []
    },
    "23": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "25": {
      "op": "bz main_bare_routing@7",
      "stack_out": []
    },
    "28": {
      "op": "pushbytess 0x02bece11 0xe4a55150 // method \"hello(string)string\", method \"create_group(string,string,uint64,uint64,string)void\"",
      "defined_out": [
        "Method(create_group(string,string,uint64,uint64,string)void)",
        "Method(hello(string)string)"
      ],
      "stack_out": [
        "Method(hello(string)string)",
        "Method(create_group(string,string,uint64,uint64,string)void)"
      ]
    },
    "40": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_group(string,string,uint64,uint64,string)void)",
        "Method(hello(string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(hello(string)string)",
        "Method(create_group(string,string,uint64,uint64,string)void)",
        "tmp%2#0"
      ]
    },
    "43": {
      "op": "match main_hello_route@5 main_create_group_route@6",
      "stack_out": []
    },
    "49": {
      "block": "main_after_if_else@9",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "50": {
      "op": "return",
      "stack_out": []
    },
    "51": {
      "block": "main_create_group_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "53": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "54": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "55": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "57": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "58": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "61": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "64": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "67": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "70": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%15#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "73": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "74": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "77": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "78": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "81": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%21#0"
      ]
    },
    "84": {
      "callsub": "smart_contracts.submate.contract.Submate.create_group",
      "op": "callsub create_group",
      "stack_out": []
    },
    "87": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "88": {
      "op": "return",
      "stack_out": []
    },
    "89": {
      "block": "main_hello_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "91": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "92": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "93": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "95": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "96": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "99": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "102": {
      "callsub": "smart_contracts.submate.contract.Submate.hello",
      "op": "callsub hello",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "105": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "106": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "107": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "108": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "111": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "112": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "113": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "120": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "121": {
      "op": "log",
      "stack_out": []
    },
    "122": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "123": {
      "op": "return",
      "stack_out": []
    },
    "124": {
      "block": "main_bare_routing@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "126": {
      "op": "bnz main_after_if_else@9",
      "stack_out": []
    },
    "129": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "131": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "132": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "133": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "134": {
      "op": "return",
      "stack_out": []
    },
    "135": {
      "subroutine": "smart_contracts.submate.contract.Submate.hello",
      "params": {
        "name#0": "bytes"
      },
      "block": "hello",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "138": {
      "op": "pushbytes \"Hello, \"",
      "defined_out": [
        "\"Hello, \""
      ],
      "stack_out": [
        "\"Hello, \""
      ]
    },
    "147": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"Hello, \"",
        "name#0 (copy)"
      ],
      "stack_out": [
        "\"Hello, \"",
        "name#0 (copy)"
      ]
    },
    "149": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "150": {
      "retsub": true,
      "op": "retsub"
    },
    "151": {
      "subroutine": "smart_contracts.submate.contract.Submate.create_group",
      "params": {
        "group_name#0": "bytes",
        "subscription#0": "bytes",
        "per_user_fee#0": "uint64",
        "max_members#0": "uint64",
        "creator#0": "bytes"
      },
      "block": "create_group",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "154": {
      "op": "frame_dig -5",
      "defined_out": [
        "group_name#0 (copy)"
      ],
      "stack_out": [
        "group_name#0 (copy)"
      ]
    },
    "156": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "group_name#0 (copy)"
      ],
      "stack_out": [
        "group_name#0 (copy)",
        "\"\""
      ]
    },
    "157": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "158": {
      "error": "group_name must not be empty",
      "op": "assert // group_name must not be empty",
      "stack_out": []
    },
    "159": {
      "op": "frame_dig -4",
      "defined_out": [
        "subscription#0 (copy)"
      ],
      "stack_out": [
        "subscription#0 (copy)"
      ]
    },
    "161": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "subscription#0 (copy)",
        "\"\""
      ]
    },
    "162": {
      "op": "!=",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "163": {
      "error": "subscription must not be empty",
      "op": "assert // subscription must not be empty",
      "stack_out": []
    },
    "164": {
      "op": "frame_dig -3",
      "defined_out": [
        "per_user_fee#0 (copy)"
      ],
      "stack_out": [
        "per_user_fee#0 (copy)"
      ]
    },
    "166": {
      "error": "per_user_fee must be greater than 0",
      "op": "assert // per_user_fee must be greater than 0",
      "stack_out": []
    },
    "167": {
      "op": "frame_dig -2",
      "defined_out": [
        "max_members#0 (copy)"
      ],
      "stack_out": [
        "max_members#0 (copy)"
      ]
    },
    "169": {
      "error": "max_members must be greater than 0",
      "op": "assert // max_members must be greater than 0",
      "stack_out": []
    },
    "170": {
      "op": "frame_dig -2",
      "stack_out": [
        "max_members#0 (copy)"
      ]
    },
    "172": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "max_members#0 (copy)"
      ],
      "stack_out": [
        "max_members#0 (copy)",
        "4"
      ]
    },
    "174": {
      "op": "<=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "175": {
      "error": "max_members must be less than or equal to 100",
      "op": "assert // max_members must be less than or equal to 100",
      "stack_out": []
    },
    "176": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "177": {
      "op": "bytec_0 // \"groups\"",
      "defined_out": [
        "\"groups\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"groups\""
      ]
    },
    "178": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "179": {
      "error": "check self.groups exists",
      "op": "assert // check self.groups exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "180": {
      "op": "bytec_1 // \"\"",
      "stack_out": [
        "maybe_value%0#0",
        "\"\""
      ]
    },
    "181": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "182": {
      "op": "bz create_group_else_body@2",
      "stack_out": []
    },
    "185": {
      "op": "bytec_0 // \"groups\"",
      "stack_out": [
        "\"groups\""
      ]
    },
    "186": {
      "op": "frame_dig -5",
      "stack_out": [
        "\"groups\"",
        "group_name#0 (copy)"
      ]
    },
    "188": {
      "op": "app_global_put",
      "stack_out": []
    },
    "189": {
      "block": "create_group_after_if_else@3",
      "stack_in": [],
      "op": "pushbytes \"group_name\"",
      "defined_out": [
        "\"group_name\""
      ],
      "stack_out": [
        "\"group_name\""
      ]
    },
    "201": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"group_name\"",
        "group_name#0 (copy)"
      ],
      "stack_out": [
        "\"group_name\"",
        "group_name#0 (copy)"
      ]
    },
    "203": {
      "op": "app_global_put",
      "stack_out": []
    },
    "204": {
      "op": "pushbytes \"subscription\"",
      "defined_out": [
        "\"subscription\""
      ],
      "stack_out": [
        "\"subscription\""
      ]
    },
    "218": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"subscription\"",
        "subscription#0 (copy)"
      ],
      "stack_out": [
        "\"subscription\"",
        "subscription#0 (copy)"
      ]
    },
    "220": {
      "op": "app_global_put",
      "stack_out": []
    },
    "221": {
      "op": "pushbytes \"creator\"",
      "defined_out": [
        "\"creator\""
      ],
      "stack_out": [
        "\"creator\""
      ]
    },
    "230": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"creator\"",
        "creator#0 (copy)"
      ],
      "stack_out": [
        "\"creator\"",
        "creator#0 (copy)"
      ]
    },
    "232": {
      "op": "app_global_put",
      "stack_out": []
    },
    "233": {
      "op": "pushbytes \"members\"",
      "defined_out": [
        "\"members\""
      ],
      "stack_out": [
        "\"members\""
      ]
    },
    "242": {
      "op": "frame_dig -1",
      "stack_out": [
        "\"members\"",
        "creator#0 (copy)"
      ]
    },
    "244": {
      "op": "app_global_put",
      "stack_out": []
    },
    "245": {
      "op": "pushbytes \"pending_members\"",
      "defined_out": [
        "\"pending_members\""
      ],
      "stack_out": [
        "\"pending_members\""
      ]
    },
    "262": {
      "op": "bytec_1 // \"\"",
      "defined_out": [
        "\"\"",
        "\"pending_members\""
      ],
      "stack_out": [
        "\"pending_members\"",
        "\"\""
      ]
    },
    "263": {
      "op": "app_global_put",
      "stack_out": []
    },
    "264": {
      "op": "pushbytes \"per_user_fee\"",
      "defined_out": [
        "\"per_user_fee\""
      ],
      "stack_out": [
        "\"per_user_fee\""
      ]
    },
    "278": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"per_user_fee\"",
        "per_user_fee#0 (copy)"
      ],
      "stack_out": [
        "\"per_user_fee\"",
        "per_user_fee#0 (copy)"
      ]
    },
    "280": {
      "op": "app_global_put",
      "stack_out": []
    },
    "281": {
      "op": "pushbytes \"max_members\"",
      "defined_out": [
        "\"max_members\""
      ],
      "stack_out": [
        "\"max_members\""
      ]
    },
    "294": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"max_members\"",
        "max_members#0 (copy)"
      ],
      "stack_out": [
        "\"max_members\"",
        "max_members#0 (copy)"
      ]
    },
    "296": {
      "op": "app_global_put",
      "stack_out": []
    },
    "297": {
      "retsub": true,
      "op": "retsub"
    },
    "298": {
      "block": "create_group_else_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "299": {
      "op": "bytec_0 // \"groups\"",
      "defined_out": [
        "\"groups\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"groups\""
      ]
    },
    "300": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "301": {
      "error": "check self.groups exists",
      "op": "assert // check self.groups exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "302": {
      "op": "pushbytes \",\"",
      "defined_out": [
        "\",\"",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\",\""
      ]
    },
    "305": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "306": {
      "op": "frame_dig -5",
      "defined_out": [
        "group_name#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "group_name#0 (copy)"
      ]
    },
    "308": {
      "op": "concat",
      "defined_out": [
        "materialized_values%0#0"
      ],
      "stack_out": [
        "materialized_values%0#0"
      ]
    },
    "309": {
      "op": "bytec_0 // \"groups\"",
      "stack_out": [
        "materialized_values%0#0",
        "\"groups\""
      ]
    },
    "310": {
      "op": "swap",
      "stack_out": [
        "\"groups\"",
        "materialized_values%0#0"
      ]
    },
    "311": {
      "op": "app_global_put",
      "stack_out": []
    },
    "312": {
      "op": "b create_group_after_if_else@3"
    }
  }
}
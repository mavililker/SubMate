/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Submate","structs":{},"methods":[{"name":"hello","args":[{"type":"string","name":"name"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"create_group","args":[{"type":"string","name":"group_name"},{"type":"string","name":"subscription"},{"type":"uint64","name":"per_user_fee"},{"type":"uint64","name":"max_members"},{"type":"string","name":"creator"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":5},"local":{"ints":0,"bytes":0}},"keys":{"global":{"group_name":{"keyType":"AVMString","valueType":"AVMString","key":"Z3JvdXBfbmFtZQ=="},"subscription":{"keyType":"AVMString","valueType":"AVMString","key":"c3Vic2NyaXB0aW9u"},"creator":{"keyType":"AVMString","valueType":"AVMString","key":"Y3JlYXRvcg=="},"members":{"keyType":"AVMString","valueType":"AVMString","key":"bWVtYmVycw=="},"pending_members":{"keyType":"AVMString","valueType":"AVMString","key":"cGVuZGluZ19tZW1iZXJz"},"per_user_fee":{"keyType":"AVMString","valueType":"AVMUint64","key":"cGVyX3VzZXJfZmVl"},"max_members":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWF4X21lbWJlcnM="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[33,72],"errorMessage":"OnCompletion is not NoOp"},{"pc":[113],"errorMessage":"can only call when creating"},{"pc":[36,75],"errorMessage":"can only call when not creating"},{"pc":[141],"errorMessage":"group_name must not be empty"},{"pc":[153],"errorMessage":"max_members must be greater than 0"},{"pc":[159],"errorMessage":"max_members must be less than or equal to 100"},{"pc":[150],"errorMessage":"per_user_fee must be greater than 0"},{"pc":[147],"errorMessage":"subscription must not be empty"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zdWJtYXRlL2NvbnRyYWN0LnB5OjYKICAgIC8vIGNsYXNzIFN1Ym1hdGUoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0A3CiAgICBwdXNoYnl0ZXNzIDB4MDJiZWNlMTEgMHhlNGE1NTE1MCAvLyBtZXRob2QgImhlbGxvKHN0cmluZylzdHJpbmciLCBtZXRob2QgImNyZWF0ZV9ncm91cChzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQsc3RyaW5nKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2hlbGxvX3JvdXRlQDMgbWFpbl9jcmVhdGVfZ3JvdXBfcm91dGVANAoKbWFpbl9hZnRlcl9pZl9lbHNlQDExOgogICAgLy8gc21hcnRfY29udHJhY3RzL3N1Ym1hdGUvY29udHJhY3QucHk6NgogICAgLy8gY2xhc3MgU3VibWF0ZShBUkM0Q29udHJhY3QpOgogICAgcHVzaGludCAwIC8vIDAKICAgIHJldHVybgoKbWFpbl9jcmVhdGVfZ3JvdXBfcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zdWJtYXRlL2NvbnRyYWN0LnB5OjEyCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3N1Ym1hdGUvY29udHJhY3QucHk6NgogICAgLy8gY2xhc3MgU3VibWF0ZShBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAzCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA1CiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3N1Ym1hdGUvY29udHJhY3QucHk6MTIKICAgIC8vIEBhYmltZXRob2QoKQogICAgY2FsbHN1YiBjcmVhdGVfZ3JvdXAKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4KCm1haW5faGVsbG9fcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zdWJtYXRlL2NvbnRyYWN0LnB5OjgKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3VibWF0ZS9jb250cmFjdC5weTo2CiAgICAvLyBjbGFzcyBTdWJtYXRlKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL3N1Ym1hdGUvY29udHJhY3QucHk6OAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGhlbGxvCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0A3OgogICAgLy8gc21hcnRfY29udHJhY3RzL3N1Ym1hdGUvY29udHJhY3QucHk6NgogICAgLy8gY2xhc3MgU3VibWF0ZShBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxMQogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4KCgovLyBzbWFydF9jb250cmFjdHMuc3VibWF0ZS5jb250cmFjdC5TdWJtYXRlLmhlbGxvKG5hbWU6IGJ5dGVzKSAtPiBieXRlczoKaGVsbG86CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3VibWF0ZS9jb250cmFjdC5weTo4LTkKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIGhlbGxvKHNlbGYsIG5hbWU6IFN0cmluZykgLT4gU3RyaW5nOgogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3VibWF0ZS9jb250cmFjdC5weToxMAogICAgLy8gcmV0dXJuICJIZWxsbywgIiArIG5hbWUKICAgIHB1c2hieXRlcyAiSGVsbG8sICIKICAgIGZyYW1lX2RpZyAtMQogICAgY29uY2F0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuc3VibWF0ZS5jb250cmFjdC5TdWJtYXRlLmNyZWF0ZV9ncm91cChncm91cF9uYW1lOiBieXRlcywgc3Vic2NyaXB0aW9uOiBieXRlcywgcGVyX3VzZXJfZmVlOiB1aW50NjQsIG1heF9tZW1iZXJzOiB1aW50NjQsIGNyZWF0b3I6IGJ5dGVzKSAtPiB2b2lkOgpjcmVhdGVfZ3JvdXA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3VibWF0ZS9jb250cmFjdC5weToxMi0yMAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgY3JlYXRlX2dyb3VwKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgZ3JvdXBfbmFtZTogU3RyaW5nLAogICAgLy8gICAgIHN1YnNjcmlwdGlvbjogU3RyaW5nLAogICAgLy8gICAgIHBlcl91c2VyX2ZlZTogVUludDY0LAogICAgLy8gICAgIG1heF9tZW1iZXJzOiBVSW50NjQsCiAgICAvLyAgICAgY3JlYXRvcjogU3RyaW5nLAogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gNSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3VibWF0ZS9jb250cmFjdC5weToyMQogICAgLy8gYXNzZXJ0IGdyb3VwX25hbWUgIT0gIiIsICJncm91cF9uYW1lIG11c3Qgbm90IGJlIGVtcHR5IgogICAgZnJhbWVfZGlnIC01CiAgICBwdXNoYnl0ZXMgIiIKICAgICE9CiAgICBhc3NlcnQgLy8gZ3JvdXBfbmFtZSBtdXN0IG5vdCBiZSBlbXB0eQogICAgLy8gc21hcnRfY29udHJhY3RzL3N1Ym1hdGUvY29udHJhY3QucHk6MjIKICAgIC8vIGFzc2VydCBzdWJzY3JpcHRpb24gIT0gIiIsICJzdWJzY3JpcHRpb24gbXVzdCBub3QgYmUgZW1wdHkiCiAgICBmcmFtZV9kaWcgLTQKICAgIHB1c2hieXRlcyAiIgogICAgIT0KICAgIGFzc2VydCAvLyBzdWJzY3JpcHRpb24gbXVzdCBub3QgYmUgZW1wdHkKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zdWJtYXRlL2NvbnRyYWN0LnB5OjIzCiAgICAvLyBhc3NlcnQgcGVyX3VzZXJfZmVlID4gMCwgInBlcl91c2VyX2ZlZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwIgogICAgZnJhbWVfZGlnIC0zCiAgICBhc3NlcnQgLy8gcGVyX3VzZXJfZmVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zdWJtYXRlL2NvbnRyYWN0LnB5OjI0CiAgICAvLyBhc3NlcnQgbWF4X21lbWJlcnMgPiAwLCAibWF4X21lbWJlcnMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMCIKICAgIGZyYW1lX2RpZyAtMgogICAgYXNzZXJ0IC8vIG1heF9tZW1iZXJzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zdWJtYXRlL2NvbnRyYWN0LnB5OjI1CiAgICAvLyBhc3NlcnQgbWF4X21lbWJlcnMgPD0gNCwgIm1heF9tZW1iZXJzIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIDEwMCIKICAgIGZyYW1lX2RpZyAtMgogICAgcHVzaGludCA0IC8vIDQKICAgIDw9CiAgICBhc3NlcnQgLy8gbWF4X21lbWJlcnMgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gMTAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3VibWF0ZS9jb250cmFjdC5weToyOAogICAgLy8gc2VsZi5ncm91cF9uYW1lID0gZ3JvdXBfbmFtZQogICAgcHVzaGJ5dGVzICJncm91cF9uYW1lIgogICAgZnJhbWVfZGlnIC01CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3N1Ym1hdGUvY29udHJhY3QucHk6MjkKICAgIC8vIHNlbGYuc3Vic2NyaXB0aW9uID0gc3Vic2NyaXB0aW9uCiAgICBwdXNoYnl0ZXMgInN1YnNjcmlwdGlvbiIKICAgIGZyYW1lX2RpZyAtNAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zdWJtYXRlL2NvbnRyYWN0LnB5OjMwCiAgICAvLyBzZWxmLmNyZWF0b3IgPSBjcmVhdG9yCiAgICBwdXNoYnl0ZXMgImNyZWF0b3IiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3VibWF0ZS9jb250cmFjdC5weTozMQogICAgLy8gc2VsZi5tZW1iZXJzID0gY3JlYXRvcgogICAgcHVzaGJ5dGVzICJtZW1iZXJzIgogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3N1Ym1hdGUvY29udHJhY3QucHk6MzIKICAgIC8vIHNlbGYucGVuZGluZ19tZW1iZXJzID0gU3RyaW5nKCIiKQogICAgcHVzaGJ5dGVzcyAicGVuZGluZ19tZW1iZXJzIiAiIiAvLyAicGVuZGluZ19tZW1iZXJzIiwgIiIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3VibWF0ZS9jb250cmFjdC5weTozMwogICAgLy8gc2VsZi5wZXJfdXNlcl9mZWUgPSBwZXJfdXNlcl9mZWUKICAgIHB1c2hieXRlcyAicGVyX3VzZXJfZmVlIgogICAgZnJhbWVfZGlnIC0zCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3N1Ym1hdGUvY29udHJhY3QucHk6MzQKICAgIC8vIHNlbGYubWF4X21lbWJlcnMgPSBtYXhfbWVtYmVycwogICAgcHVzaGJ5dGVzICJtYXhfbWVtYmVycyIKICAgIGZyYW1lX2RpZyAtMgogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1Ygo=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CjEbQQBjggIEAr7OEQTkpVFQNhoAjgIAKgADgQBDMRkURDEYRDYaAVcCADYaAlcCADYaAxc2GgQXNhoFVwIAiABDgQFDMRkURDEYRDYaAVcCAIgAIEkVFlcGAkxQgAQVH3x1TFCwgQFDMRlA/60xGBREgQFDigEBgAdIZWxsbywgi/9QiYoFAIv7gAATRIv8gAATRIv9RIv+RIv+gQQORIAKZ3JvdXBfbmFtZYv7Z4AMc3Vic2NyaXB0aW9ui/xngAdjcmVhdG9yi/9ngAdtZW1iZXJzi/9nggIPcGVuZGluZ19tZW1iZXJzAGeADHBlcl91c2VyX2ZlZYv9Z4ALbWF4X21lbWJlcnOL/meJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Submate contract
 */
export type SubmateArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'hello(string)string': {
      name: string
    }
    'create_group(string,string,uint64,uint64,string)void': {
      groupName: string
      subscription: string
      perUserFee: bigint | number
      maxMembers: bigint | number
      creator: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'hello(string)string': [name: string]
    'create_group(string,string,uint64,uint64,string)void': [groupName: string, subscription: string, perUserFee: bigint | number, maxMembers: bigint | number, creator: string]
  }
}

/**
 * The return type for each method
 */
export type SubmateReturns = {
  'hello(string)string': string
  'create_group(string,string,uint64,uint64,string)void': void
}

/**
 * Defines the types of available calls and state of the Submate smart contract.
 */
export type SubmateTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'hello(string)string' | 'hello', {
      argsObj: SubmateArgs['obj']['hello(string)string']
      argsTuple: SubmateArgs['tuple']['hello(string)string']
      returns: SubmateReturns['hello(string)string']
    }>
    & Record<'create_group(string,string,uint64,uint64,string)void' | 'create_group', {
      argsObj: SubmateArgs['obj']['create_group(string,string,uint64,uint64,string)void']
      argsTuple: SubmateArgs['tuple']['create_group(string,string,uint64,uint64,string)void']
      returns: SubmateReturns['create_group(string,string,uint64,uint64,string)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        groupName: string
        subscription: string
        creator: string
        members: string
        pendingMembers: string
        perUserFee: bigint
        maxMembers: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type SubmateSignatures = keyof SubmateTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type SubmateNonVoidMethodSignatures = keyof SubmateTypes['methods'] extends infer T ? T extends keyof SubmateTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Submate smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends SubmateSignatures> = SubmateTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Submate smart contract to the method's return type
 */
export type MethodReturn<TSignature extends SubmateSignatures> = SubmateTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = SubmateTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type SubmateCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type SubmateDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: SubmateCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Submate smart contract
 */
export abstract class SubmateParamsFactory {
  /**
   * Constructs a no op call for the hello(string)string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hello(params: CallParams<SubmateArgs['obj']['hello(string)string'] | SubmateArgs['tuple']['hello(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hello(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name],
    }
  }
  /**
   * Constructs a no op call for the create_group(string,string,uint64,uint64,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createGroup(params: CallParams<SubmateArgs['obj']['create_group(string,string,uint64,uint64,string)void'] | SubmateArgs['tuple']['create_group(string,string,uint64,uint64,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_group(string,string,uint64,uint64,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.groupName, params.args.subscription, params.args.perUserFee, params.args.maxMembers, params.args.creator],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Submate smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class SubmateFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `SubmateFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new SubmateClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new SubmateClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Submate smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: SubmateDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new SubmateClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Submate smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Submate smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Submate smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new SubmateClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Submate smart contract
 */
export class SubmateClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `SubmateClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Submate app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `SubmateClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends SubmateNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `SubmateClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<SubmateClient> {
    return new SubmateClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `SubmateClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<SubmateClient> {
    return new SubmateClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Submate smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Submate smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hello: (params: CallParams<SubmateArgs['obj']['hello(string)string'] | SubmateArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SubmateParamsFactory.hello(params))
    },

    /**
     * Makes a call to the Submate smart contract using the `create_group(string,string,uint64,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createGroup: (params: CallParams<SubmateArgs['obj']['create_group(string,string,uint64,uint64,string)void'] | SubmateArgs['tuple']['create_group(string,string,uint64,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(SubmateParamsFactory.createGroup(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Submate smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Submate smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hello: (params: CallParams<SubmateArgs['obj']['hello(string)string'] | SubmateArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SubmateParamsFactory.hello(params))
    },

    /**
     * Makes a call to the Submate smart contract using the `create_group(string,string,uint64,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createGroup: (params: CallParams<SubmateArgs['obj']['create_group(string,string,uint64,uint64,string)void'] | SubmateArgs['tuple']['create_group(string,string,uint64,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(SubmateParamsFactory.createGroup(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Submate smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Submate smart contract using the `hello(string)string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hello: async (params: CallParams<SubmateArgs['obj']['hello(string)string'] | SubmateArgs['tuple']['hello(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SubmateParamsFactory.hello(params))
      return {...result, return: result.return as unknown as (undefined | SubmateReturns['hello(string)string'])}
    },

    /**
     * Makes a call to the Submate smart contract using the `create_group(string,string,uint64,uint64,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createGroup: async (params: CallParams<SubmateArgs['obj']['create_group(string,string,uint64,uint64,string)void'] | SubmateArgs['tuple']['create_group(string,string,uint64,uint64,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(SubmateParamsFactory.createGroup(params))
      return {...result, return: result.return as unknown as (undefined | SubmateReturns['create_group(string,string,uint64,uint64,string)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new SubmateClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Submate app
   */
  state = {
    /**
     * Methods to access global state for the current Submate app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          groupName: result.group_name,
          subscription: result.subscription,
          creator: result.creator,
          members: result.members,
          pendingMembers: result.pending_members,
          perUserFee: result.per_user_fee,
          maxMembers: result.max_members,
        }
      },
      /**
       * Get the current value of the group_name key in global state
       */
      groupName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("group_name")) as string | undefined },
      /**
       * Get the current value of the subscription key in global state
       */
      subscription: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("subscription")) as string | undefined },
      /**
       * Get the current value of the creator key in global state
       */
      creator: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creator")) as string | undefined },
      /**
       * Get the current value of the members key in global state
       */
      members: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("members")) as string | undefined },
      /**
       * Get the current value of the pending_members key in global state
       */
      pendingMembers: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("pending_members")) as string | undefined },
      /**
       * Get the current value of the per_user_fee key in global state
       */
      perUserFee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("per_user_fee")) as bigint | undefined },
      /**
       * Get the current value of the max_members key in global state
       */
      maxMembers: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("max_members")) as bigint | undefined },
    },
  }

  public newGroup(): SubmateComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a hello(string)string method call against the Submate contract
       */
      hello(params: CallParams<SubmateArgs['obj']['hello(string)string'] | SubmateArgs['tuple']['hello(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hello(params)))
        resultMappers.push((v) => client.decodeReturnValue('hello(string)string', v))
        return this
      },
      /**
       * Add a create_group(string,string,uint64,uint64,string)void method call against the Submate contract
       */
      createGroup(params: CallParams<SubmateArgs['obj']['create_group(string,string,uint64,uint64,string)void'] | SubmateArgs['tuple']['create_group(string,string,uint64,uint64,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createGroup(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Submate contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as SubmateComposer
  }
}
export type SubmateComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the hello(string)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hello(params?: CallParams<SubmateArgs['obj']['hello(string)string'] | SubmateArgs['tuple']['hello(string)string']>): SubmateComposer<[...TReturns, SubmateReturns['hello(string)string'] | undefined]>

  /**
   * Calls the create_group(string,string,uint64,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createGroup(params?: CallParams<SubmateArgs['obj']['create_group(string,string,uint64,uint64,string)void'] | SubmateArgs['tuple']['create_group(string,string,uint64,uint64,string)void']>): SubmateComposer<[...TReturns, SubmateReturns['create_group(string,string,uint64,uint64,string)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Submate smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): SubmateComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): SubmateComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<SubmateComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<SubmateComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<SubmateComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<SubmateComposerResults<TReturns>>
}
export type SubmateComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

